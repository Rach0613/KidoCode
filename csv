import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

# Load the Excel file
pizza_df = pd.read_excel('Data Model - Pizza Sales.xlsx', engine='openpyxl')

# Check for duplicated records
duplicates = pizza_df.duplicated().sum()
print(f"Number of duplicated records: {duplicates}")

# Compute basic statistics for numeric columns, excluding 'datetime.time' columns
numeric_cols = pizza_df.select_dtypes(include=[np.number]).columns

mean = pizza_df[numeric_cols].mean() # mean=average
median = pizza_df[numeric_cols].median()
mode = pizza_df[numeric_cols].mode().iloc[0]  # Use iloc[0] to handle multiple modes
std_dev = pizza_df[numeric_cols].std()
percentile = pizza_df[numeric_cols].quantile([0.25, 0.5, 0.75])

# Combine all statistics into a DataFrame with statistics labels as the first column
descriptive_stats = pd.DataFrame({
    'Statistic': ['Mean', 'Median', 'Mode', 'Standard Deviation'],
    'order_details_id': [mean['order_details_id'], median['order_details_id'], mode['order_details_id'], std_dev['order_details_id']],
    'order_id': [mean['order_id'], median['order_id'], mode['order_id'], std_dev['order_id']],
    'quantity': [mean['quantity'], median['quantity'], mode['quantity'], std_dev['quantity']],
    'unit_price': [mean['unit_price'], median['unit_price'], mode['unit_price'], std_dev['unit_price']],
    'total_price': [mean['total_price'], median['total_price'], mode['total_price'], std_dev['total_price']]
})

# Total revenue
total_revenue = pizza_df['total_price'].sum()
print("Total Revenue: $", total_revenue)

# Calculate average order value
avg_order_value = pizza_df.groupby('order_id')['total_price'].sum().mean()
print("Average Order Value: $", round(avg_order_value, 2))  # Set the precision to two digits

# Total pizzas sold
total_pizzas_sold = pizza_df['quantity'].sum()
print("Total Pizzas Sold:", total_pizzas_sold)

# Total orders
total_orders = len(pizza_df.groupby('order_id'))
print("Total Orders:", total_orders)

# Average pizzas per order
avg_pizzas_per_order = pizza_df['quantity'].sum() / total_orders
print("Average Pizzas per Order:", round(avg_pizzas_per_order, 2))

# Save the descriptive statistics to a CSV file
descriptive_stats.to_csv('descriptive_statistics.csv')

print("Descriptive statistics saved to descriptive_statistics.csv")




#plotting graph

#Sales Performance Analysis: What is the average unit price and revenue of pizza across different categories? (bar graph)
category_analysis = pizza_df.groupby('pizza_category').agg(
    average_unit_price=('unit_price', 'mean'),
    revenue_per_category=('unit_price', lambda x: (x * pizza_df['quantity']).sum())
).sort_values(by='revenue_per_category', ascending=False)
print("Average Unit Price and Revenue by Category:\n", category_analysis)

    # Revenue by Pizza Category
category_analysis['revenue_per_category'].plot(kind='bar', color='skyblue')
plt.xlabel('Pizza Category')
plt.ylabel('Revenue')
plt.title('Revenue by Pizza')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


#Which days of the week have the highest number of orders? (line graph)
pizza_df['day_of_week'] = pd.to_datetime(pizza_df['order_date']).dt.strftime('%A')
day_of_week_analysis = pizza_df.groupby('day_of_week')['order_id'].count().sort_values(ascending=False)
print("Highest Number of Orders by Day of Week:\n", day_of_week_analysis)

    # orders by day of week
day_of_week_analysis.plot(kind='line', color='purple')
plt.xlabel('Day of Week')
plt.ylabel('Number of Orders')
plt.title('Orders by Day of Week')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Which month has the highest revenue? (plot graph)
month_revenue_analysis = pizza_df.groupby(pd.to_datetime(pizza_df['order_date']).dt.strftime('%B'))['total_price'].sum()
print("Highest Revenue Months:\n", month_revenue_analysis)

    # Renvenue by month
plt.scatter(month_revenue_analysis.index, month_revenue_analysis, color='lime')
plt.xlabel('Month')
plt.ylabel('Revenue')
plt.title('Revenue by Month')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


#Seasonal Analysis: Which season has the highest revenue? (box plot)
def categorize_season(month):
    if month in ['March', 'April', 'May']:
        return 'Spring'
    elif month in ['June', 'July', 'August']:
        return 'Summer'
    elif month in ['September', 'October', 'November']:
        return 'Fall'
    else:
        return 'Winter'
        
pizza_df['order_date'] = pd.to_datetime(pizza_df['order_date'])
pizza_df['season'] = pizza_df['order_date'].dt.strftime('%B').map(categorize_season)
print(pizza_df.head())

    # Revenue by Season
sns.boxplot(x='season', y='total_price', data=pizza_df, palette='coolwarm')
plt.xlabel('Season')
plt.ylabel('Revenue')
plt.title('Revenue Distribution by Season')
plt.tight_layout()
plt.show()

#Customer Behavior Analysis: Which pizza is ordered the most number of times? (pie chart)
most_ordered_pizza = pizza_df.groupby('pizza_name').agg(
    order_count=('order_id', 'count'),
    average_unit_price=('unit_price', 'mean')
).nlargest(3, 'order_count')
print("Most Ordered Pizzas:\n", most_ordered_pizza)

pizzas_per_category = pizza_df['pizza_category'].value_counts()
    # pizza per category distribution
pizzas_per_category.plot(kind='pie', autopct='%1.1f%%', colors=['skyblue', 'lightgreen', 'coral', 'red'])
plt.title('Pizza Category Distribution')
plt.ylabel('')  # Removes the default y-label to make the plot cleaner
plt.axis('equal')  # Ensures the pie chart is a circle
plt.show()
